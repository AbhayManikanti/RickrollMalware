from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QPushButton, QWidget, QHBoxLayout, QVBoxLayout, QLineEdit, QDialog, QDialogButtonBox, QMessageBox, QGraphicsView, QGraphicsScene, QGraphicsPixmapItem
from PyQt5.QtGui import QMovie, QPixmap, QPainter
from PyQt5.QtCore import Qt, QSize, QRectF
import sys


class GifView(QGraphicsView):
    def __init__(self, gif_path, size, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setRenderHint(QPainter.SmoothPixmapTransform)
        self.setFixedSize(size)  # Set the fixed size of the view
        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.setScene(QGraphicsScene(self))

        self.movie = QMovie(gif_path)
        self.pixmap_item = QGraphicsPixmapItem()
        self.scene().addItem(self.pixmap_item)
        self.movie.frameChanged.connect(self.update_frame)
        self.movie.start()

    def update_frame(self):
        pixmap = self.movie.currentPixmap()
        scaled_pixmap = pixmap.scaled(self.size(), Qt.IgnoreAspectRatio, Qt.SmoothTransformation)
        self.pixmap_item.setPixmap(scaled_pixmap)
        self.pixmap_item.setTransformationMode(Qt.SmoothTransformation)

class GifTextPopup(QMainWindow):
    def __init__(self, left_gif_path, right_gif_path, text_message, password):
        super().__init__()

        self.password = password
        self.setWindowTitle("GIF Text Pop-up")

        # Set window flags to disable minimize and maximize buttons
        self.setWindowFlags(Qt.Window | Qt.FramelessWindowHint)
        self.setWindowState(Qt.WindowFullScreen)  # Start in fullscreen mode

        # Create a central widget and layout
        central_widget = QWidget()
        main_layout = QVBoxLayout()  # Main vertical layout

        # Create a horizontal layout for GIFs and text
        middle_layout = QHBoxLayout()

        # Define the size for the GIFs
        gif_size = (700, 1300)  # Width and height of GIFs (adjust as needed)

        # Create GIF views with fixed size
        left_gif_label = GifView(left_gif_path, QSize(*gif_size))
        right_gif_label = GifView(right_gif_path, QSize(*gif_size))

        # Create text label
        text_label = QLabel(text_message)
        text_label.setAlignment(Qt.AlignCenter)
        text_label.setStyleSheet("font-size: 70px; font-weight: bold;")  # Customize text style as needed

        # Arrange GIFs and text in middle layout
        middle_layout.addWidget(left_gif_label)
        middle_layout.addWidget(text_label)
        middle_layout.addWidget(right_gif_label)

        # Add middle layout to the main vertical layout
        main_layout.addLayout(middle_layout)

        # Create and add the close button to the main vertical layout
        close_button = QPushButton("Close", self)
        close_button.clicked.connect(self.show_password_dialog)
        main_layout.addWidget(close_button, alignment=Qt.AlignBottom)

        # Set layout and central widget
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # Flag to prevent multiple dialogs
        self.password_dialog_shown = False

    def closeEvent(self, event):
        # Override the close event to require a password
        if not self.password_dialog_shown:
            self.show_password_dialog()
            event.ignore()  # Ignore the close event to prevent the window from closing

    def show_password_dialog(self):
        if self.password_dialog_shown:
            return

        self.password_dialog_shown = True

        dialog = PasswordDialog(self.password, self)
        if dialog.exec_() == QDialog.Accepted:
            self.close()  # Close the window if the password is correct

class PasswordDialog(QDialog):
    def __init__(self, correct_password, parent=None):
        super().__init__(parent)
        self.correct_password = correct_password
        self.setWindowTitle("Enter Password")

        # Create layout
        layout = QVBoxLayout()

        # Create and set up the password input
        self.password_input = QLineEdit(self)
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("Enter password")

        # Create dialog buttons
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(self.handle_accepted)
        button_box.rejected.connect(self.reject)

        # Add widgets to layout
        layout.addWidget(self.password_input)
        layout.addWidget(button_box)

        # Set dialog layout
        self.setLayout(layout)

    def handle_accepted(self):
        entered_password = self.password_input.text()
        if entered_password == self.correct_password:
            self.accept()  # Accept the dialog to close the window
        else:
            QMessageBox.warning(self, "Incorrect Password", "The password you entered is incorrect. Please try again.")
            self.password_input.clear()

def show_popup_with_gifs(left_gif_path, right_gif_path, text_message, password):
    app = QApplication(sys.argv)
    window = GifTextPopup(left_gif_path, right_gif_path, text_message, password)
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    left_gif_path = "tenor.gif"
    right_gif_path = "tenor.gif"
    text_message = "YOU WERE RICKROLLED!"
    password = "123"
    show_popup_with_gifs(left_gif_path, right_gif_path, text_message, password)
